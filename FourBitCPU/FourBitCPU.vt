// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/17/2013 07:27:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    FourBitCPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FourBitCPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn0_n;
reg clk;
// wires                                               
wire d_alu_carry_out;
wire [3:0] d_alu_data_out;
wire [1:0] d_alu_data_sel;
wire d_clk_cpu;
wire d_decoded_out;
wire [7:0] d_inst;
wire [3:0] d_pc;
wire d_reg_a_load;
wire [3:0] d_reg_a_out;
wire d_reg_b_load;
wire [3:0] d_reg_b_out;

// assign statements (if any)                          
FourBitCPU i1 (
// port map - connection between master ports and signals/registers   
	.btn0_n(btn0_n),
	.clk(clk),
	.d_alu_carry_out(d_alu_carry_out),
	.d_alu_data_out(d_alu_data_out),
	.d_alu_data_sel(d_alu_data_sel),
	.d_clk_cpu(d_clk_cpu),
	.d_decoded_out(d_decoded_out),
	.d_inst(d_inst),
	.d_pc(d_pc),
	.d_reg_a_load(d_reg_a_load),
	.d_reg_a_out(d_reg_a_out),
	.d_reg_b_load(d_reg_b_load),
	.d_reg_b_out(d_reg_b_out)
);
initial 
begin 
#1000000 $stop;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// btn0_n
initial
begin
	btn0_n = 1'b1;
end 
initial 
begin 
#1000000 $stop;
end 
endmodule

